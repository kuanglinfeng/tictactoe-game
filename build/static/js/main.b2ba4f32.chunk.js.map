{"version":3,"sources":["types/enums.tsx","component/Chess.tsx","component/Board.tsx","component/StatusTip.tsx","component/Game.tsx","App.tsx","index.tsx"],"names":["ChessType","GameStatus","Chess","type","onClick","chess","red","className","black","none","Board","props","isGameOver","list","chesses","map","index","key","defaultProps","StatusTip","content","status","gaming","next","redWin","blackWin","Game","state","gameStatus","nextChess","this","init","arr","i","push","setState","prevState","getStatus","horMin","Math","floor","verMin","includes","equal","handleChessClick","bind","React","Component","App","num","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b2ba4f32.chunk.js","sourcesContent":["export enum ChessType {\n  none,\n  red,\n  black\n}\n\nexport enum GameStatus {\n  /**\n   * 正在游戏中\n   */\n  gaming,\n  /**\n   * 红方胜利\n   */\n  redWin,\n  /**\n   * 黑方胜利\n   */\n  blackWin,\n  /**\n   * 平局\n   */\n  equal\n}","import React from 'react'\nimport { ChessType } from '../types/enums'\nimport './Chess.css'\n\ninterface IProps {\n  type: ChessType,\n  onClick?: () => void\n}\n\nlet Chess = ({ type, onClick }: IProps) => {\n\n  let chess = null\n\n  if (type === ChessType.red) {\n    chess = <div className='chess-item red'></div>\n  }\n  if (type === ChessType.black) {\n    chess = <div className='chess-item black'></div>\n  }\n\n  return (\n    <div className=\"chess\" onClick={() => {\n      if (type === ChessType.none && onClick) {\n        // 怎么处理 上一级来搞\n        onClick()\n      }\n    }}>\n      {chess}\n    </div>\n  )\n}\n\nexport default Chess\n\n","import React from 'react'\nimport { ChessType } from '../types/enums'\nimport Chess from './Chess'\nimport './Board.css'\ninterface IProps {\n  chesses: ChessType[],\n  // 设置可选属性，为了设置默认值\n  isGameOver?: boolean,\n  onClick?: (index:number) => void\n}\n\nlet Board: React.FC<IProps> = (props) => {\n\n  // 类型断言 断言为boolean\n  // const isGameOver = props.isGameOver as boolean\n  // 非空断言 过滤掉为空的情况\n  const isGameOver = props.isGameOver!\n\n  const list = props.chesses.map((type, index) => {\n    return (\n      <Chess \n      key={index} \n      type={type} \n      onClick={() => {\n        if (props.onClick && !isGameOver) {\n          props.onClick(index)\n        }\n      }}/>\n    )\n  })\n  return (\n    <div className=\"board\">\n      {list}\n    </div>\n  )\n}\n\nBoard.defaultProps = {\n  // 默认值赋值\n  isGameOver: false\n}\n\n\nexport default Board","import React from \"react\";\nimport './StatusTip.css'\n\nimport { GameStatus, ChessType } from \"../types/enums\";\n\n\ninterface IProps {\n  status: GameStatus,\n  next: ChessType.red | ChessType.black\n}\n\nconst StatusTip = (props: IProps) => {\n\n  let content: JSX.Element\n\n  if (props.status === GameStatus.gaming) {\n     if (props.next === ChessType.red) {\n       content = <div className='red'>红方落子</div>\n     } else {\n       content = <div className='black'>黑方落子</div>\n     }\n  } else {\n    if (props.status === GameStatus.redWin) {\n      content = <div className='win red'>红方胜利</div>\n    } else if (props.status === GameStatus.blackWin) {\n      content = <div className='win black'>黑方胜利</div>\n    } else {\n      content = <div className='win equal'>平局</div>\n    }\n  }\n\n  return (\n    <div className='status'>{content}</div>\n  )\n}\n\n\n\n\nexport default StatusTip","import React from 'react'\nimport { ChessType, GameStatus } from '../types/enums'\nimport Board from './Board'\nimport StatusTip from './StatusTip'\n\ninterface IState {\n  chesses: ChessType[],\n  gameStatus: GameStatus,\n  nextChess: ChessType.red | ChessType.black\n}\n\nclass Game extends React.Component<{}, IState> {\n\n  state: IState = {\n    chesses: [],\n    gameStatus: GameStatus.gaming,\n    nextChess: ChessType.black\n  }\n\n\n  componentDidMount() {\n    this.init()\n  }\n\n  /**\n   * 初始化数据\n   */\n  init() {\n    const arr:ChessType[] = []\n    for (let i = 0; i < 9; i++) {\n      arr.push(ChessType.none)\n    }\n    this.setState({\n      chesses: arr,\n      gameStatus: GameStatus.gaming,\n      nextChess: ChessType.black\n    })\n  }\n\n  /**\n   * 处理棋子的点击事件\n   * 如果该函数运行 说明 游戏没有结束 点击的位置没有棋子\n   * @param index \n   */\n  handleChessClick(index:number) {\n    const chesses: ChessType[] = [...this.state.chesses]\n    chesses[index] = this.state.nextChess\n    this.setState(prevState => ({\n      chesses: chesses,\n      nextChess: prevState.nextChess === ChessType.red ? ChessType.black : ChessType.red,\n      gameStatus: this.getStatus(chesses, index)\n    }))\n  }\n\n  getStatus(chesses:ChessType[], index:number): GameStatus {\n    // 1、通过落子，判断一方是否胜利\n    // 横向判断\n    const horMin = Math.floor(index / 3) * 3\n    // 纵向判断\n    const verMin = index % 3\n    if (chesses[horMin] === chesses[horMin + 1] && chesses[horMin + 1] === chesses[horMin + 2] || \n        chesses[verMin] === chesses[verMin + 3] && chesses[verMin + 3] === chesses[verMin + 6] ||\n        chesses[0] === chesses[4] && chesses[4] === chesses[8] && chesses[0] !== ChessType.none ||\n        chesses[2] === chesses[4] && chesses[4] === chesses[6] && chesses[2] !== ChessType.none  \n      ) {\n      if (chesses[index] === ChessType.red) {\n        return GameStatus.redWin\n      } else { \n        return GameStatus.blackWin\n      }\n    }\n    // 2、判断是否平局\n    if (!chesses.includes(ChessType.none)) {\n      return GameStatus.equal\n    }\n    // 3、游戏继续进行\n    return GameStatus.gaming\n  }\n\n  render() {\n    return (\n      <div className=\"game\">\n        <h1>井字棋游戏</h1>\n        <StatusTip\n          status={this.state.gameStatus}\n          next={this.state.nextChess}\n        />\n        <Board \n          chesses={this.state.chesses}\n          isGameOver={this.state.gameStatus !== GameStatus.gaming}\n          onClick={this.handleChessClick.bind(this)}\n        />\n        <button onClick={() => {this.init()}}>重新开始</button>\n      </div>\n    )\n  }\n}\n\n\n\n\nexport default Game","import React from 'react';\nimport Game from './component/Game';\n\n\nclass App extends React.Component<{}, {}> {\n  state = {\n    num: 0\n  }\n  render() {\n    return (\n      <div>\n        <Game />\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}